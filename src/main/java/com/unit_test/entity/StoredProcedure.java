/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.unit_test.entity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StoredProcedure extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4496254947659092251L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StoredProcedure\",\"namespace\":\"com.unit_test.entity\",\"fields\":[{\"name\":\"Parameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":\"string\"}},\"doc\":\"Map of parameter and type passed in\"},{\"name\":\"Table\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Map of tables found in procedure\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Map of parameter and type passed in */
  @Deprecated public java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> Parameters;
  /** Map of tables found in procedure */
  @Deprecated public java.util.List<java.lang.CharSequence> Table;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public StoredProcedure() {}

  /**
   * All-args constructor.
   * @param Parameters Map of parameter and type passed in
   * @param Table Map of tables found in procedure
   */
  public StoredProcedure(java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> Parameters, java.util.List<java.lang.CharSequence> Table) {
    this.Parameters = Parameters;
    this.Table = Table;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Parameters;
    case 1: return Table;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Parameters = (java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>>)value$; break;
    case 1: Table = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Parameters' field.
   * @return Map of parameter and type passed in
   */
  public java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> getParameters() {
    return Parameters;
  }

  /**
   * Sets the value of the 'Parameters' field.
   * Map of parameter and type passed in
   * @param value the value to set.
   */
  public void setParameters(java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> value) {
    this.Parameters = value;
  }

  /**
   * Gets the value of the 'Table' field.
   * @return Map of tables found in procedure
   */
  public java.util.List<java.lang.CharSequence> getTable() {
    return Table;
  }

  /**
   * Sets the value of the 'Table' field.
   * Map of tables found in procedure
   * @param value the value to set.
   */
  public void setTable(java.util.List<java.lang.CharSequence> value) {
    this.Table = value;
  }

  /**
   * Creates a new StoredProcedure RecordBuilder.
   * @return A new StoredProcedure RecordBuilder
   */
  public static com.unit_test.entity.StoredProcedure.Builder newBuilder() {
    return new com.unit_test.entity.StoredProcedure.Builder();
  }
  
  /**
   * Creates a new StoredProcedure RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StoredProcedure RecordBuilder
   */
  public static com.unit_test.entity.StoredProcedure.Builder newBuilder(com.unit_test.entity.StoredProcedure.Builder other) {
    return new com.unit_test.entity.StoredProcedure.Builder(other);
  }
  
  /**
   * Creates a new StoredProcedure RecordBuilder by copying an existing StoredProcedure instance.
   * @param other The existing instance to copy.
   * @return A new StoredProcedure RecordBuilder
   */
  public static com.unit_test.entity.StoredProcedure.Builder newBuilder(com.unit_test.entity.StoredProcedure other) {
    return new com.unit_test.entity.StoredProcedure.Builder(other);
  }
  
  /**
   * RecordBuilder for StoredProcedure instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StoredProcedure>
    implements org.apache.avro.data.RecordBuilder<StoredProcedure> {

    /** Map of parameter and type passed in */
    private java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> Parameters;
    /** Map of tables found in procedure */
    private java.util.List<java.lang.CharSequence> Table;

    /** Creates a new Builder */
    private Builder() {
      super(com.unit_test.entity.StoredProcedure.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.unit_test.entity.StoredProcedure.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Parameters)) {
        this.Parameters = data().deepCopy(fields()[0].schema(), other.Parameters);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Table)) {
        this.Table = data().deepCopy(fields()[1].schema(), other.Table);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing StoredProcedure instance
     * @param other The existing instance to copy.
     */
    private Builder(com.unit_test.entity.StoredProcedure other) {
            super(com.unit_test.entity.StoredProcedure.SCHEMA$);
      if (isValidValue(fields()[0], other.Parameters)) {
        this.Parameters = data().deepCopy(fields()[0].schema(), other.Parameters);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Table)) {
        this.Table = data().deepCopy(fields()[1].schema(), other.Table);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'Parameters' field.
      * Map of parameter and type passed in
      * @return The value.
      */
    public java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> getParameters() {
      return Parameters;
    }

    /**
      * Sets the value of the 'Parameters' field.
      * Map of parameter and type passed in
      * @param value The value of 'Parameters'.
      * @return This builder.
      */
    public com.unit_test.entity.StoredProcedure.Builder setParameters(java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>> value) {
      validate(fields()[0], value);
      this.Parameters = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'Parameters' field has been set.
      * Map of parameter and type passed in
      * @return True if the 'Parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Parameters' field.
      * Map of parameter and type passed in
      * @return This builder.
      */
    public com.unit_test.entity.StoredProcedure.Builder clearParameters() {
      Parameters = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Table' field.
      * Map of tables found in procedure
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTable() {
      return Table;
    }

    /**
      * Sets the value of the 'Table' field.
      * Map of tables found in procedure
      * @param value The value of 'Table'.
      * @return This builder.
      */
    public com.unit_test.entity.StoredProcedure.Builder setTable(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.Table = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'Table' field has been set.
      * Map of tables found in procedure
      * @return True if the 'Table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Table' field.
      * Map of tables found in procedure
      * @return This builder.
      */
    public com.unit_test.entity.StoredProcedure.Builder clearTable() {
      Table = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public StoredProcedure build() {
      try {
        StoredProcedure record = new StoredProcedure();
        record.Parameters = fieldSetFlags()[0] ? this.Parameters : (java.util.List<java.util.Map<java.lang.CharSequence,java.lang.CharSequence>>) defaultValue(fields()[0]);
        record.Table = fieldSetFlags()[1] ? this.Table : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
